# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

from .base_reporter import BaseReporter

class MarkdownReporter(BaseReporter):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    """
    def generate(self, analysis_data: dict, output_path: str):
        """
        –°–æ–∑–¥–∞–µ—Ç Markdown-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º.
        """
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write("# üìä –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–æ–≥-—Ñ–∞–π–ª–∞\n\n")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            f.write("## üìù –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")
            f.write(f"- **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {analysis_data['total_records']}\n")
            start_time, end_time = analysis_data['log_period']
            f.write(f"- **–ü–µ—Ä–∏–æ–¥ –ª–æ–≥–æ–≤:** —Å `{start_time}` –ø–æ `{end_time}`\n\n")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
            f.write("## üö¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º\n")
            f.write("| –£—Ä–æ–≤–µ–Ω—å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |\n")
            f.write("|---------|------------|\n")
            for level, count in analysis_data['level_counts'].items():
                f.write(f"| {level} | {count} |\n")
            f.write("\n")

            # –¢–æ–ø –æ—à–∏–±–æ–∫
            f.write(f"## ‚ùå –¢–æ–ø-{len(analysis_data['top_errors'])} –æ—à–∏–±–æ–∫\n")
            if not analysis_data['top_errors'].empty:
                f.write("| –û—à–∏–±–∫–∞ | –ß–∞—Å—Ç–æ—Ç–∞ |\n")
                f.write("|--------|---------|\n")
                for msg, count in analysis_data['top_errors'].items():
                    f.write(f"| `{msg}` | {count} |\n")
            else:
                f.write("–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n")
            f.write("\n")

            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            f.write("## ‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º\n")
            f.write("| –ß–∞—Å | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π |\n")
            f.write("|-----|--------------------|\n")
            for time, count in analysis_data['activity_by_hour'].items():
                f.write(f"| {time.strftime('%Y-%m-%d %H:00')} | {count} |\n")